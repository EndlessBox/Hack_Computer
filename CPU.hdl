// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    Not(in=instruction[15], out=notInstruc15);
    Not(in=outZr, out=notZr);
    Not(in=outNg, out=notNg);

    /*
     * Mux16 Of the Alu output and instruction given.
     * the sel option is controlled by the instruction bit instruction[15]
     * that define which type of instruction it's. (0 == A, 1 == C);
     */
    
    Mux16(a=outALU, b=instruction, sel=notInstruc15, out=outMuxInstrucAndD);


    /*
     * Aregister, load the value according to two bits, the instruction bit [15],
     * Or the load bit 'd1' instruction[5]
     * 
     */
    Or(a=instruction[5], b=notInstruc15, out=Aload);
    ARegister(in=outMuxInstrucAndD, load=Aload, out=outRegA, out[0..14]=addressM);
    
    
    /*
     * Mux 16 Of the registerA or the inputMemory. the sel bit is controlled by
     * the 'a' bit instruction[12] which select if we want to operate on (A and D) or (M and D)
     */
    Mux16(a=outRegA, b=inM, sel=instruction[12], out=outMuxinMAndA);

    /*
     * Bregister, load the value according to 'd2' instruction[4]
     */
    And(a=instruction[4], b=instruction[15], out=outDload);
    DRegister(in=outALU, load=outDload, out=outRegD);

    /*
     * Alu Alu calculate (A and D) or (M and D) according to the computation bits instruction[6..11]
     */
    ALU(x=outRegD, y=outMuxinMAndA, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=outZr, ng=outNg);
    
    And(a=instruction[3], b=instruction[15], out=writeM);

    And(a=notZr, b=notNg, out=positiveInput);
    
    And(a=instruction[2], b=outNg, out=JumpNegative);
    And(a=instruction[1], b=outZr, out=JumpZero);
    And(a=instruction[0], b=positiveInput, out=jumpPositive);

    Or(a=jumpPositive, b=JumpNegative, out=jpOrjn);
    Or(a=jpOrjn, b=JumpZero, out=outJump);
    
    And(a=outJump, b=instruction[15], out=jumpAndC);





    PC(in=outRegA, load=jumpAndC, inc=true, reset=reset, out[0..14]=pc);
}